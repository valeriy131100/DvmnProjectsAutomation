import re
from datetime import date, time, timedelta

import telegram
from django.core.management.base import BaseCommand
from django.db.models import Max, Min
from telegram import (ReplyKeyboardRemove, Update, ReplyKeyboardMarkup)
from telegram.ext import (CallbackContext, CommandHandler, ConversationHandler, Filters,
                          MessageHandler, Updater)

from projects_automation.settings import TELEGRAM_TOKEN, telegram_bot
from tgbot.models import Student, Project, ProjectManager, ProjectTeam, \
    check_slot_compatibility
from django.db.models import Count


def build_menu(buttons, n_cols,
               header_buttons=None,
               footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu


def start_handler(update: Update, context: CallbackContext):

    project_id = context.args if context.args else None

    user_id = update.effective_chat.id
    start_date = Project.objects.all().only('project_date').first()
    start_date = start_date.project_date
    second_start_date = start_date + timedelta(days=7)

    context.user_data['start_date'] = start_date
    context.user_data['second_start_date'] = second_start_date

    student = Student.objects.get(telegram_id=user_id)
    first_name = update.effective_chat.first_name

    if not student:
        update.message.reply_text(
            f'–ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n'
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –≤–∏–∂—É —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ \n'
            '–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∫—Ä—É—Ç—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, –∏–¥–∏ –Ω–∞ https://dvmn.org üéÅ\n\n'
            '–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–µ—à—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º, –µ—â–µ —Ä–∞–∑ –Ω–∞–ø–∏—à–∏ /start',
        )

        return ConversationHandler.END
    else:
        update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç, –ø–æ–∫–∞ –µ—â–µ —Ä–∞–Ω–æ, –º—ã –Ω–∞–ø–∏—à–µ–º —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç '
            '—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!'
        )


def project_start_handler(update: Update, context: CallbackContext):
    text = update.message.text
    s_project_id = re.match(r'^–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç (\d+)$', text).groups()[0]
    project_id = int(s_project_id)

    user_id = update.effective_chat.id
    start_date = Project.objects.get(id=project_id)
    start_date = start_date.project_date
    second_start_date = start_date + timedelta(days=7)

    context.user_data['start_date'] = start_date
    context.user_data['second_start_date'] = second_start_date

    student = Student.objects.get(telegram_id=user_id)
    first_name = update.effective_chat.first_name

    context.user_data['from_far_east'] = student.from_far_east
    buttons = ['–Ø –≤ –¥–µ–ª–µ', '–Ø –Ω–µ —Å –≤–∞–º–∏']
    update.message.reply_text(
        f'–ú–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç —Å {start_date} –∏–ª–∏ {second_start_date} \n\n'
        '–¢—ã —Å –Ω–∞–º–∏?\n',
        reply_markup=ReplyKeyboardMarkup(
            keyboard=build_menu(buttons, n_cols=2),
            resize_keyboard=True
        ),
    )
    return 'choose_week'


def choose_week(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    text = update.message.text

    project_dates = [
        str(context.user_data['start_date']),
        str(context.user_data['second_start_date'])
    ]

    if text == '–Ø –≤ –¥–µ–ª–µ':
        update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞ –∫–∞–∫—É—é –Ω–µ–¥–µ–ª—é —Ç–µ–±—è –∑–∞–ø–∏—Å–∞—Ç—å?\n\n'

            f'–ú–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: \n\n',
            reply_markup=ReplyKeyboardMarkup(
                keyboard=build_menu(project_dates, n_cols=2),
                resize_keyboard=True
            ),
        )

        return 'choose_time'
    elif text == '–Ø –Ω–µ —Å –≤–∞–º–∏':
        update.message.reply_text(
            '–í–æ—Ç —ç—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
            '–∫—É—Ä–∞—Ç–æ—Ä—É –∏ —É—Ç–æ—á–Ω–∏ –≤ —á–µ–º –¥–µ–ª–æ',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


def choose_time(update: Update, context: CallbackContext):
    buttons = []
    text = update.message.text
    user_id = update.effective_chat.id
    student = Student.objects.get(telegram_id=user_id)
    student.project_date = date.fromisoformat(text)
    student.save()

    available_time = ProjectManager.objects.all().aggregate(
        start_time=Min('projects_time_begin'),
        end_time=Max('projects_time_end')
    )
    min_available_time = time.strftime(available_time['start_time'], '%H:%M')
    max_available_time = time.strftime(available_time['end_time'], '%H:%M')

    project_managers = ProjectManager.objects.all()
    for manager in project_managers:
        buttons += [str(meeting_time) for meeting_time in manager.get_time_slots()]
    buttons = list(dict.fromkeys(buttons))

    if context.user_data['from_far_east']:
        update.message.reply_text(
            '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–∞–Ω–∏–≤–∞—Ç—å—Å—è —Å –ü–ú–æ–º? (–≤—Ä–µ–º—è –¥–ª—è –î–í) '
            '(–≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–°–ö)',
            reply_markup=ReplyKeyboardMarkup(
                keyboard=build_menu(buttons, n_cols=5),
                resize_keyboard=True
            ))

        return 'write_time_to_db'

    else:
        update.message.reply_text(

            '–°–æ–∑–≤–æ–Ω—ã —Å –ü–ú–æ–º –∏ –∫–æ–º–∞–Ω–¥–æ–π –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, '
            '–∫—Ä–æ–º–µ —Å—É–±–±–æ—Ç—ã –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è. '
            '–ò –±—É–¥—É—Ç –¥–ª–∏—Ç—å—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ 30 –º–∏–Ω. \n\n'
            '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–∞–Ω–∏–≤–∞—Ç—å—Å—è —Å –ü–ú–æ–º? '
            f'–í –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ —Å  {min_available_time} –ø–æ {max_available_time} '
            '(–≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–°–ö) \n\n'
            f'* –£–∫–∞–∑–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {min_available_time}-{max_available_time}',
            reply_markup=ReplyKeyboardRemove()
        )

        return 'write_time_to_db'


def send_project_registration(telegram_id, project_id):

    keyboard = [
        [
            f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç {project_id}'
        ]
    ]

    try:
        telegram_bot.send_message(
            chat_id=telegram_id,
            text='–ü—Ä–∏–≤–µ—Ç! –°–Ω–æ–≤–∞ –ø—Ä–∏—à–ª–∞ –ø–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ '
                 '–µ—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
            reply_markup=ReplyKeyboardMarkup(keyboard)
        )
    except telegram.error.BadRequest:
        pass


def write_time_to_db(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    text = update.message.text
    if "-" not in text or len(text) < 10 or "." in text:
        update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–≤–æ–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 18:00-00:00',
            reply_markup=ReplyKeyboardRemove()
        )
        return

    preferred_time_begin, preferred_time_end = text.split('-')
    preferred_time_begin = time.fromisoformat(preferred_time_begin)
    preferred_time_end = time.fromisoformat(preferred_time_end)
    student = Student.objects.get(telegram_id=user_id)
    student.preferred_time_end = preferred_time_end
    student.preferred_time_begin = preferred_time_begin
    student.save()

    update.message.reply_text(
        '–ü–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ–∑–≤–æ–Ω–æ–≤ '
        '–∏ —Å–æ—Å—Ç–∞–≤–æ–º –≥—Ä—É–ø–ø—ã!',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def retry_start_handler(update: Update, context: CallbackContext):
    text = update.message.text

    match = re.match(r'^–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ (\d+)$', text)
    if match:
        s_project_id = match.groups()[0]
        project_id = int(s_project_id)
        context.user_data['project_id'] = project_id
    else:
        project_id = context.user_data.get('project_id', None)

    still_not_full_teams = list(
        ProjectTeam.objects.filter(project__pk=project_id)
                           .annotate(students_num=Count('students'))
                           .filter(students_num=2)
                           .prefetch_related('students')
    )

    student = Student.objects.get(telegram_id=update.message.from_user.id)

    buttons = [
        [f'–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—É {team.id} '
         f'(—Å–æ–±—Ä–∞–Ω–∏—è –≤ {team.project_time.isoformat(timespec="minutes")})']
        for team in still_not_full_teams
        if (check_slot_compatibility(student, list(team.students.all()))
            and team.project_manager not in student.excluded_pms.all())
    ]

    if student.preferred_week == 1:
        buttons.append(
            ['–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ']
        )

    if len(buttons) > 0:
        update.message.reply_text(
            '–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã',
            reply_markup=ReplyKeyboardMarkup(
                buttons,
                resize_keyboard=True
            )
        )
        return 'retry_answer'
    else:
        update.message.reply_text(
            '–ö–∞–∂–µ—Ç—Å—è —É –Ω–∞—Å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, '
            '—á—Ç–æ–±—ã —Ç—ã –ø–æ–ø–∞–ª –Ω–∞ –ø—Ä–æ–µ–∫—Ç. '
            '–°–ø—Ä–æ—Å–∏ —É —Å–≤–æ–µ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –¥–µ–ª–∞—Ç—å',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


def retry_add_team_handler(update: Update, context: CallbackContext):
    student = Student.objects.get(telegram_id=update.message.from_user.id)

    text = update.message.text

    team_id = re.match(
        r'^–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—É (\d+)',
        text
    ).groups()[0]
    team = ProjectTeam.objects.get(pk=int(team_id))

    if team.students.count() == 3:
        update.message.reply_text(
            '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ç–æ-—Ç–æ —É–∂–µ —É—Å–ø–µ–ª '
            '–ø–æ–ø–∞—Å—Ç—å –≤ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.'
        )
        return retry_start_handler(update, context)
    else:
        team.students.add(student)
        team.save()

        project_id = context.user_data['project_id']
        project = Project.objects.get(pk=project_id)

        project_name = project.name

        participants_links = '\n'.join([
            f'<a href="tg://user?id={team_student.telegram_id}">'
            f'{team_student.full_name}</a>'
            for team_student in team.students.all()
        ])

        student_link = (
            f'<a href="tg://user?id={student.telegram_id}">'
            f'{student.full_name}</a>'
        )

        pm = team.project_manager
        pm_link = f'<a href="tg://user?id={pm.telegram_id}">{pm.full_name}</a>'

        project_time = team.project_time.isoformat(timespec="minutes")

        text = (
            f'–£—Å–ø–µ—à–Ω–æ!\n'
            f'–°–æ–±—Ä–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ {project_time}\n\n'
            f'–¢–≤–æ–π –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä: {pm_link}\n'
            f'–¢–≤–æ–∏ –∫–æ–ª–ª–µ–≥–∏: \n'
            f'{participants_links}'
        )

        buttons = [
            [
                f'–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ {project_id}'
            ]
        ]

        update.message.reply_text(
            text,
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup(
                buttons,
                resize_keyboard=True
            )
        )

        pm = team.project_manager

        pm_text = (
            f'–í –∫–æ–º–∞–Ω–¥—É –Ω–∞ {project_time} –¥–æ–±–∞–≤–∏–ª—Å—è —É—á–µ–Ω–∏–∫ {student_link}'
        )

        try:
            telegram_bot.send_message(
                chat_id=pm.telegram_id,
                text=pm_text,
                parse_mode='HTML'
            )
        except telegram.error.BadRequest:
            pass

        return ConversationHandler.END


def retry_change_week_handler(update: Update, context: CallbackContext):
    student = Student.objects.get(telegram_id=update.message.from_user.id)
    student.preferred_week = 2
    student.save()

    update.message.reply_text(
        '–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ!',
        reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


def leave_from_project_handler(update: Update, context: CallbackContext):
    text = update.message.text

    match = re.match(r'^–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ (\d+)$', text)
    project_id = int(match.groups()[0])
    student = Student.objects.get(telegram_id=update.message.from_user.id)

    team = ProjectTeam.objects.get(
        students=student,
        project__pk=project_id
    )

    team.students.remove(student)
    team.save()

    update.message.reply_text(
        '–ß—Ç–æ –∂, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –¥–æ –≤—Å—Ç—Ä–µ—á–∏!'
    )

    pm = team.project_manager
    team_time = team.project_time.isoformat(timespec='minutes')

    if team.students.count() < 2:
        students = list(team.students.all())
        team.delete()

        for student in students:
            student.send_cant_group_message(
                project_id=project_id,
                start_text='–ü—Ä–∏–≤–µ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞ —Ä–∞—Å–ø–∞–ª–∞—Å—å.'
            )

        try:
            telegram_bot.send_message(
                chat_id=pm.telegram_id,
                text=f'–ì—Ä—É–ø–ø–∞ –Ω–∞ {team_time} —Ä–∞—Å–ø–∞–ª–∞—Å—å'
            )
        except telegram.error.BadRequest:
            pass
    else:
        telegram_bot.send_message(
            chat_id=pm.telegram_id,
            text=f'–ò–∑ –≥—Ä—É–ø–ø—ã –Ω–∞ {team_time} '
                 f'–≤—ã—à–µ–ª {student.get_telegram_mention()}',
            parse_mode='HTML'
        )


def cancel(update: Update, context: CallbackContext):
    """Cancel and end the conversation."""
    update.message.reply_text(
        '–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!', reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


class Command(BaseCommand):
    help = '–ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç –∏ –∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º'

    def handle(self, *args, **kwargs):
        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        dispatcher = updater.dispatcher

        reg_conversation = ConversationHandler(
            entry_points=[
                MessageHandler(
                    Filters.regex(r'^–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç \d+$'),
                    project_start_handler,
                    pass_user_data=True
                )],
            states={
                'choose_week': [
                    MessageHandler(
                        Filters.text,
                        choose_week,
                        pass_user_data=True
                    )
                ],
                'choose_time': [
                    MessageHandler(
                        Filters.text,
                        choose_time,
                        pass_user_data=True
                    )
                ],
                'write_time_to_db': [
                    MessageHandler(
                        Filters.text,
                        write_time_to_db,
                        pass_user_data=True
                    )
                ]
            },
            per_user=True,
            fallbacks=[
                CommandHandler('cancel', cancel)],
        )

        retry_conversation = ConversationHandler(
            entry_points=[
                MessageHandler(
                    Filters.regex(r'^–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ \d+$'),
                    retry_start_handler,
                    pass_user_data=True
                )],
            states={
                'retry_answer': [
                    MessageHandler(
                        Filters.regex(r'^–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—É \d+'
                                      r' \(—Å–æ–±—Ä–∞–Ω–∏—è –≤ \d{2}:\d{2}\)$'),
                        retry_add_team_handler,
                        pass_user_data=True
                    ),
                    MessageHandler(
                        Filters.regex(r'^–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ø–∞—Å—Ç—å –≤'
                                      r' –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ$'),
                        retry_change_week_handler,
                        pass_user_data=True
                    )
                ]
            },
            per_user=True,
            fallbacks=[]
        )

        dispatcher.add_handler(reg_conversation)
        dispatcher.add_handler(retry_conversation)
        dispatcher.add_handler(
            MessageHandler(
                Filters.regex(r'^–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ \d+$'),
                leave_from_project_handler
            )
        )
        dispatcher.add_handler(CommandHandler('start', start_handler))
        # dispatcher.add_handler(constructor_handler)
        # dispatcher.add_handler(
        #     MessageHandler(filters=Filters.text, callback=show_orders))
        # dispatcher.add_handler(CommandHandler("help", help))

        updater.start_polling()
        updater.idle()
