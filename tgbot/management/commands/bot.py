import os
from datetime import datetime, date, time, timedelta
from pprint import pprint


from django.core.management.base import BaseCommand
from django.db.models import Max, Min
from dotenv import load_dotenv
from telegram import (ForceReply, InlineKeyboardButton, InlineKeyboardMarkup,
                      ParseMode, ReplyKeyboardRemove, Update, chat,
                      ReplyKeyboardMarkup, KeyboardButton)
from telegram.ext import (CallbackContext, CallbackQueryHandler,
                          CommandHandler, ConversationHandler, Filters,
                          MessageHandler, Updater)

from tgbot.models import WEEK_CHOICES, Student, ProjectManager

load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')


def start_handler(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    project_start = WEEK_CHOICES

    student = Student.objects.get(telegram_id=user_id)
    first_name = update.effective_chat.first_name

    if not student:
        update.message.reply_text(
            f'–ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n'
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é? –Ω–µ –≤–∏–∂—É —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ \n'
            '–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∫—Ä—É—Ç—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, –∏–¥–∏ –Ω–∞ https://dvmn.org üéÅ\n\n'
            '–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–µ—à—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º, –µ—â–µ —Ä–∞–∑ –Ω–∞–ø–∏—à–∏ /start',
        )

        return ConversationHandler.END

    else:
        if str(datetime.now()) > str(project_start[1][1]):
            update.message.reply_text(
                f'–ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n'
                f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —É–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏.'
                '–ñ–¥–∏ –ø—Ä–æ–µ–∫—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ\n'
            )
            # add remove third week if datetime.now > third week
            return ConversationHandler.END

        else:
            context.user_data['from_far_east'] = student.from_far_east
            update.message.reply_text(
                f'–ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n'
                '–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –Ω–æ–≤–æ–º—É –ø—Ä–æ–µ–∫—Ç—É\n'
                f'–ú–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç —Å {project_start[0][1]} –∏–ª–∏ {project_start[1][1]} \n\n'
                '–¢—ã —Å –Ω–∞–º–∏?',
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [
                            KeyboardButton(text='–Ø –≤ –¥–µ–ª–µ'),
                            KeyboardButton(text='–Ø –Ω–µ —Å –≤–∞–º–∏')
                        ],
                    ],
                    resize_keyboard=True
                ),
            )
        return 'choose_week'


def choose_week(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    text = update.message.text

    project_start = WEEK_CHOICES

    if text == '–Ø –≤ –¥–µ–ª–µ':
        update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞ –∫–∞–∫—É—é –Ω–µ–¥–µ–ª—é —Ç–µ–±—è –∑–∞–ø–∏—Å–∞—Ç—å?\n\n'

            f'–ú–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç —Å {project_start[0][1]} –∏–ª–∏ c {project_start[1][1]} \n\n'
            '–¢—ã —Å –Ω–∞–º–∏?',
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text=project_start[0][1]),
                        KeyboardButton(text=project_start[1][1])
                    ],
                ],
                resize_keyboard=True
            ),
        )

        return 'choose_time'
    elif text == '–Ø –Ω–µ —Å –≤–∞–º–∏':
        update.message.reply_text(
            '–í–æ—Ç —ç—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç! –° —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —á–µ–ª–æ–≤–µ–∫,'
            '—á—Ç–æ–±—ã –≤—ã—è—Å–Ω–∏—Ç—å –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞.\n\n'
            '–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏ /start',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


def choose_time(update: Update, context: CallbackContext):
    # add if text != '–ù–∞–∑–∞–¥' to enable week change
    text = update.message.text
    user_id = update.effective_chat.id
    student = Student.objects.get(telegram_id=user_id)
    student.project_date = date.fromisoformat(text)
    student.save()

    available_time = ProjectManager.objects.all().aggregate(
        start_time=Min('projects_time_begin'),
        end_time=Max('projects_time_end')
    )
    min_available_time = time.strftime(available_time['start_time'], '%H:%M')
    max_available_time = time.strftime(available_time['end_time'], '%H:%M')

    if context.user_data['from_far_east']:
        update.message.reply_text(
            '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–∞–Ω–∏–≤–∞—Ç—å—Å—è —Å –ü–ú–æ–º? (–≤—Ä–µ–º—è –¥–ª—è –î–í) '
            '(–≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–°–ö)',
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='10:00-10:30'),
                        KeyboardButton(text='10:30-11:00'),
                        KeyboardButton(text='11:00-11:30'),
                        KeyboardButton(text='11:30-12:00'),
                    ],
                ],
                resize_keyboard=True
            ))

        return 'write_time_to_db'

    else:
        update.message.reply_text(
            '–°–æ–∑–≤–æ–Ω—ã —Å –ü–ú–æ–º –∏ –∫–æ–º–∞–Ω–¥–æ–π –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å,'
            '–∫—Ä–æ–º–µ —Å—É–±–±–æ—Ç—ã –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è.' 
            '–ò –±—É–¥—É—Ç –¥–ª–∏—Ç—å—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ 30 –º–∏–Ω \n\n'
            '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–∞–Ω–∏–≤–∞—Ç—å—Å—è —Å –ü–ú–æ–º?'
            f'–í –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ —Å  {min_available_time} –ø–æ {max_available_time} '
            '(–≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–°–ö) \n\n'
            f'* –£–∫–∞–∑–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {min_available_time}-{max_available_time}',
            reply_markup=ReplyKeyboardRemove()
        )

        return 'write_time_to_db'


def write_time_to_db(update: Update, context: CallbackContext):

    user_id = update.effective_chat.id
    text = update.message.text
    preferred_time_begin, preferred_time_end = text.split('-')
    preferred_time_begin = time.fromisoformat(preferred_time_begin)
    preferred_time_end = time.fromisoformat(preferred_time_end)
    student = Student.objects.get(telegram_id=user_id)
    student.preferred_time_end = preferred_time_end
    student.preferred_time_begin = preferred_time_begin
    student.save()

    update.message.reply_text(
        '–ü–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ–∑–∑–≤–æ–Ω–æ–≤'
        '–∏ —Å–æ—Å—Ç–∞–≤–æ–º –≥—Ä—É–ø–ø—ã!',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def cancel(update: Update, context: CallbackContext):
    """Cancel and end the conversation."""
    update.message.reply_text(
        '–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!', reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


class Command(BaseCommand):
    help = '–ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç –∏ –∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º'

    def handle(self, *args, **kwargs):
        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        dispatcher = updater.dispatcher

        conversation = ConversationHandler(
            entry_points=[CommandHandler('start', start_handler)],
            states={
                'choose_week': [
                    MessageHandler(
                        Filters.text,
                        choose_week,
                        pass_user_data=True
                    )
                ],
                'choose_time': [
                    MessageHandler(
                        Filters.text,
                        choose_time,
                        pass_user_data=True
                    )
                ],
                'write_time_to_db': [
                    MessageHandler(
                        Filters.text,
                        write_time_to_db,
                        pass_user_data=True
                    )
                ]
            },
            fallbacks=[
                CommandHandler('cancel', cancel)],
        )

        dispatcher.add_handler(conversation)
        # dispatcher.add_handler(constructor_handler)
        # dispatcher.add_handler(
        #     MessageHandler(filters=Filters.text, callback=show_orders))
        # dispatcher.add_handler(CommandHandler("help", help))

        updater.start_polling()
        updater.idle()
