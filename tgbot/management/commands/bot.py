import os

from django.core.management.base import BaseCommand
from dotenv import load_dotenv
from telegram import (ForceReply, InlineKeyboardButton, InlineKeyboardMarkup,
                      ParseMode, ReplyKeyboardRemove, Update, chat,
                      ReplyKeyboardMarkup, KeyboardButton)
from telegram.ext import (CallbackContext, CallbackQueryHandler,
                          CommandHandler, ConversationHandler, Filters,
                          MessageHandler, Updater)
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')


def start_handler(update: Update, context: CallbackContext):
    students = [479351324]
    project_start = [
        '15.02.2022',
        '25.02.2022',
    ]

    user_id = update.effective_chat.id
    first_name = update.effective_chat.first_name
    print(first_name, user_id)

    if user_id not in students:
        update.message.reply_text(
            f'–ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n'
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –≤–∏–∂—É —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ \n'
            '–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∫—Ä—É—Ç—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∏–¥–∏ –Ω–∞ https://dvmn.org üéÅ\n\n'
            '–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–µ—à—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º –µ—â–µ —Ä–∞–∑ –Ω–∞–ø–∏—à–∏ /start',
        )
    else:
        update.message.reply_text(
            f'–ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n'
            '–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –Ω–æ–≤–æ–º—É –ø—Ä–æ–µ–∫—Ç—É\n'
            f'–ú–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç —Å {project_start[0]} –∏–ª–∏ {project_start[1]} \n\n'
            '–¢—ã —Å –Ω–∞–º–∏?',
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='–Ø –≤ –¥–µ–ª–µ'),
                        KeyboardButton(text='–Ø –Ω–µ —Å –≤–∞–º–∏')
                    ],
                ],
                resize_keyboard=True
            ),
        )
        return 'choose_week'


def choose_week(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    text = update.message.text

    project_start = [
        '15.02.2022',
        '25.02.2022',
    ]

    if text == '–Ø –≤ –¥–µ–ª–µ':
        update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω–æ –Ω–∞ –∫–∞–∫—É—é –Ω–µ–¥–µ–ª—é —Ç–µ–±—è –∑–∞–ø–∏—Å–∞—Ç—å?\n\n'
            
            f'–ú–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç —Å {project_start[0]} –∏–ª–∏ {project_start[1]} \n\n'
            '–¢—ã —Å –Ω–∞–º–∏?',
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text=project_start[0]),
                        KeyboardButton(text=project_start[1])
                    ],
                ],
                resize_keyboard=True
            ),
        )
        return 'choose_time'
    elif text == '–Ø –Ω–µ —Å –≤–∞–º–∏':
        update.message.reply_text(
            '–í–æ—Ç —ç—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç! –° —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à–µ —á–µ–ª–æ–≤–µ–∫,'
            '—á—Ç–æ–±—ã –≤—ã—è—Å–Ω–∏—Ç—å –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞.\n\n'
            '–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏ /start',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


def choose_time(update: Update, context: CallbackContext):
    pass


def cancel(update: Update, context: CallbackContext):
    """Cancel and end the conversation."""
    update.message.reply_text(
        '–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!', reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


class Command(BaseCommand):

    help = '–ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç –∏ –∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º'

    def handle(self, *args, **kwargs):
        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        dispatcher = updater.dispatcher

        conversation = ConversationHandler(
            entry_points=[CommandHandler('start', start_handler)],
            states={
                'choose_week': [
                    MessageHandler(
                        Filters.text,
                        choose_week,
                        pass_user_data=True
                    )
                ],
                'choose_time': [
                    MessageHandler(
                        Filters.text,
                        choose_time,
                        pass_user_data=True
                    )
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel)],
        )

        dispatcher.add_handler(conversation)
        # dispatcher.add_handler(constructor_handler)
        # dispatcher.add_handler(
        #     MessageHandler(filters=Filters.text, callback=show_orders))
        # dispatcher.add_handler(CommandHandler("help", help))

        updater.start_polling()
        updater.idle()