import os
from datetime import datetime, date, time

from django.core.management.base import BaseCommand
from dotenv import load_dotenv
from telegram import (ForceReply, InlineKeyboardButton, InlineKeyboardMarkup,
                      ParseMode, ReplyKeyboardRemove, Update, chat,
                      ReplyKeyboardMarkup, KeyboardButton)
from telegram.ext import (CallbackContext, CallbackQueryHandler,
                          CommandHandler, ConversationHandler, Filters,
                          MessageHandler, Updater)

from tgbot.models import Student, Project

load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')


def build_menu(buttons, n_cols,
               header_buttons=None,
               footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu


def start_handler(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    start_dates = Project.objects.all().only('project_date').distinct()

    project_dates = [
        str(project.project_date) for project in start_dates
    ]
    context.user_data['project_dates'] = project_dates

    student = Student.objects.get(telegram_id=user_id)
    first_name = update.effective_chat.first_name

    if not student:
        update.message.reply_text(
            f'–ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n'
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é? –Ω–µ –≤–∏–∂—É —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ \n'
            '–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∫—Ä—É—Ç—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, –∏–¥–∏ –Ω–∞ https://dvmn.org üéÅ\n\n'
            '–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–µ—à—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º, –µ—â–µ —Ä–∞–∑ –Ω–∞–ø–∏—à–∏ /start',
        )

        return ConversationHandler.END

    else:
        context.user_data['from_far_east'] = student.from_far_east
        buttons = ['–Ø –≤ –¥–µ–ª–µ', '–Ø –Ω–µ —Å –≤–∞–º–∏']
        update.message.reply_text(
            f'–ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n'
            '–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –Ω–æ–≤–æ–º—É –ø—Ä–æ–µ–∫—Ç—É\n'
            f'–ú–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç —Å {project_dates[0]} –∏–ª–∏ {project_dates[1]} \n\n'
            '–¢—ã —Å –Ω–∞–º–∏?',
            reply_markup=ReplyKeyboardMarkup(
                keyboard=build_menu(buttons, n_cols=2),
                resize_keyboard=True
            ),
        )
    return 'choose_week'


def choose_week(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    text = update.message.text

    project_dates = context.user_data['project_dates']

    if text == '–Ø –≤ –¥–µ–ª–µ':
        update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞ –∫–∞–∫—É—é –Ω–µ–¥–µ–ª—é —Ç–µ–±—è –∑–∞–ø–∏—Å–∞—Ç—å?\n\n'

            f'–ú–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: \n\n',
            reply_markup=ReplyKeyboardMarkup(
                keyboard=build_menu(project_dates, n_cols=2),
                resize_keyboard=True
            ),
        )

        return 'choose_time'
    elif text == '–Ø –Ω–µ —Å –≤–∞–º–∏':
        update.message.reply_text(
            '–í–æ—Ç —ç—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç! –° —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —á–µ–ª–æ–≤–µ–∫,'
            '—á—Ç–æ–±—ã –≤—ã—è—Å–Ω–∏—Ç—å –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞.\n\n'
            '–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏ /start',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


def choose_time(update: Update, context: CallbackContext):
    # add if text != '–ù–∞–∑–∞–¥' to enable week change
    text = update.message.text
    user_id = update.effective_chat.id
    student = Student.objects.get(telegram_id=user_id)
    student.project_date = date.fromisoformat(text)
    student.save()

    if context.user_data['from_far_east']:
        update.message.reply_text(
            '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–∞–Ω–∏–≤–∞—Ç—å—Å—è —Å –ü–ú–æ–º? (–≤—Ä–µ–º—è –¥–ª—è –î–í) '
            '(–≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–°–ö)',
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='10:00-10:30'),
                        KeyboardButton(text='10:30-11:00'),
                        KeyboardButton(text='11:00-11:30'),
                        KeyboardButton(text='11:30-12:00'),
                    ],
                ],
                resize_keyboard=True
            ))

        return 'write_time_to_db'

    else:
        update.message.reply_text(
            '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–∞–Ω–∏–≤–∞—Ç—å—Å—è —Å –ü–ú–æ–º? (–≤—Ä–µ–º—è –¥–ª—è –¶–†–†–§)'
            '(–≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–°–ö)',
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text='18:00-18:30'),
                        KeyboardButton(text='18:30-19:00'),
                        KeyboardButton(text='19:00-19:30'),
                        KeyboardButton(text='19:30-20:00'),
                        KeyboardButton(text='20:00-20:30'),
                        KeyboardButton(text='20:30-21:00'),
                    ],
                ],
                resize_keyboard=True
            ))

        return 'write_time_to_db'


def write_time_to_db(update: Update, context: CallbackContext):

    user_id = update.effective_chat.id
    text = update.message.text
    preferred_time_begin, preferred_time_end = text.split('-')
    preferred_time_begin = time.fromisoformat(preferred_time_begin)
    preferred_time_end = time.fromisoformat(preferred_time_end)
    student = Student.objects.get(telegram_id=user_id)
    student.preferred_time_end = preferred_time_end
    student.preferred_time_begin = preferred_time_begin
    student.save()

    update.message.reply_text(
        '–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ!',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def cancel(update: Update, context: CallbackContext):
    """Cancel and end the conversation."""
    update.message.reply_text(
        '–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!', reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


class Command(BaseCommand):
    help = '–ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç –∏ –∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º'

    def handle(self, *args, **kwargs):
        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        dispatcher = updater.dispatcher

        conversation = ConversationHandler(
            entry_points=[CommandHandler('start', start_handler)],
            states={
                'choose_week': [
                    MessageHandler(
                        Filters.text,
                        choose_week,
                        pass_user_data=True
                    )
                ],
                'choose_time': [
                    MessageHandler(
                        Filters.text,
                        choose_time,
                        pass_user_data=True
                    )
                ],
                'write_time_to_db': [
                    MessageHandler(
                        Filters.text,
                        write_time_to_db,
                        pass_user_data=True
                    )
                ]
            },
            per_user=True,
            fallbacks=[
                CommandHandler('cancel', cancel)],
        )

        dispatcher.add_handler(conversation)
        # dispatcher.add_handler(constructor_handler)
        # dispatcher.add_handler(
        #     MessageHandler(filters=Filters.text, callback=show_orders))
        # dispatcher.add_handler(CommandHandler("help", help))

        updater.start_polling()
        updater.idle()
